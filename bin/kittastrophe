#!/usr/bin/env ruby

lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'kittastrophe'

require 'optparse'

if ARGV.empty?
  ARGV[0] = '-h'
end

options = {}

parser = OptionParser.new do |opts|
  opts.banner = "A command line interface in Ruby to fetch information about your kits using the public Typekit APIs"
  opts.separator ""
  opts.separator "Options:"

  opts.on("-c", "--configure", "You will be prompted for configuration values of your TypeKit API key.") do |c|
    options[:cmd] = "config"
  end

  opts.on("-l", "--list", "List kits owned by the authenticating user") do |l|
    options[:cmd] = "list"
  end

  opts.on("-s", "--show ID", "Show information for kit with the given ID") do |id|
    options[:cmd] = "show"
    options[:id] = id || ''
  end

  opts.on("-z", "") do |id|
    options[:cmd] = "zoid"
  end

  opts.on_tail("-h", "--help", "Shows help") do |help|
    puts opts
    exit
  end

end

## OptionParser will throw exception upon parsing if you aren't ready for it
begin
  parser.parse!
rescue OptionParser::InvalidArgument, OptionParser::InvalidOption, OptionParser::MissingArgument # Alphabetical reordering is not only soothing but also makes this program work better for reasons that aren't obvious to me.
  puts "Invalid option or missing argument!"
  puts ""
  ARGV[0] = '-h'
  parser.parse!
  exit
end

# Slightly more sophisticated error checking
if options[:cmd] == "show" and options[:id].nil?
  abort(optparse.help)
end

client = Kittastrophe::Client.new()
case options[:cmd]
when "config"
  client.configure
when "list"
  pp client.list
when "show"
  pp client.show(options[:id])
when "zoid"
  pp client.zoidberg
else
  abort(optparse.help) # don't particularly dig that this has to be here, but it's ok
end

